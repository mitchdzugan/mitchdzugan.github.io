{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebase","window","initializeApp","apiKey","authDomain","projectId","db","firestore","settings","timestampsInSnapshots","makeId","text","possible","i","charAt","Math","floor","random","length","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","slsCode","localStorage","getItem","setItem","state","collection","doc","onSnapshot","data","setState","code","set","unsubYou","unsubTo","prevProps","prevState","_this2","currState","prevYouId","personId","currYouId","prevToId","toId","currToId","you","to","react_default","a","createElement","style","display","textAlign","flexDirection","margin","className","width","height","src","_this$state$to","Address","Name","Wishes","marginLeft","marginTop","renderContent","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCIlCC,eAAWC,OAAOD,UAExBA,EAASE,cAAc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,oBAIb,IAAIC,EAAKN,EAASO,YAGlBD,EAAGE,SAAS,CACVC,uBAAuB,IAGzB,IAAMC,EAAS,WAIb,IAHA,IAAIC,EAAO,GACPC,EAAW,uCAENC,EAAI,EAAGA,EAAI,GAAIA,IACtBF,GAAQC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASM,SAE9D,OAAOP,GAkGMQ,cA9Fb,SAAAA,EAAaC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAMQ,EAAU3B,OAAO4B,aAAaC,QAAQ,aAAepB,IAFzC,OAGlBT,OAAO4B,aAAaE,QAAQ,WAAYH,GACxCP,EAAKW,MAAQ,CACXJ,WAGFtB,EAAG2B,WAAW,SAASC,IAAIN,GAC1BO,WAAW,SAACD,GACJA,EAAIE,OAKPf,EAAKgB,SAAS,CAAEC,KAAMJ,EAAIE,SAJ1B9B,EAAG2B,WAAW,SAASC,IAAIN,GAASW,IAAI,CACtCX,cAORP,EAAKmB,SAAW,aAChBnB,EAAKoB,QAAU,aApBGpB,kFAuBDqB,EAAWC,GAAW,IAAAC,EAAApB,KACjCqB,EAAYrB,KAAKQ,MACjBc,EAAYH,EAAUL,MAAQK,EAAUL,KAAKS,SAC7CC,EAAYH,EAAUP,MAAQO,EAAUP,KAAKS,SAC7CE,EAAWN,EAAUL,MAAQK,EAAUL,KAAKY,KAC5CC,EAAWN,EAAUP,MAAQO,EAAUP,KAAKY,KAE9CF,IAAcF,IAChBtB,KAAKgB,WACLhB,KAAKgB,SAAWlC,EAAG2B,WAAW,UAAUC,IAAIc,GAAWb,WAAW,SAAAD,GAChEU,EAAKP,SAAS,CAAEe,IAAKlB,EAAIE,YAIzBe,IAAaF,IACfzB,KAAKiB,UACLjB,KAAKiB,QAAUnC,EAAG2B,WAAW,UAAUC,IAAIiB,GAAUhB,WAAW,SAAAD,GAC9DU,EAAKP,SAAS,CAAEgB,GAAInB,EAAIE,oDAM5B,IAAKZ,KAAKQ,MAAMM,KACd,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,UAAW,SAAUC,cAAe,SAAUC,OAAQ,SACnFP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SAASC,MAAM,QAAQC,OAAO,QAAQP,MAAO,CAAEI,OAAQ,QAAUI,IAAI,wGACpFX,EAAAC,EAAAC,cAAA,6BAKN,IAAKhC,KAAKQ,MAAMM,KAAKS,SACnB,OACEO,EAAAC,EAAAC,cAAA,4EAC+DF,EAAAC,EAAAC,cAAA,8BAD/D,eACwGF,EAAAC,EAAAC,cAAA,cAAShC,KAAKQ,MAAMM,KAAKV,SADjI,qCAMJ,IAAKJ,KAAKQ,MAAMoB,MAAQ5B,KAAKQ,MAAMqB,GACjC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,UAAW,SAAUC,cAAe,SAAUC,OAAQ,SACnFP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SAASC,MAAM,QAAQC,OAAO,QAAQP,MAAO,CAAEI,OAAQ,QAAUI,IAAI,wGACpFX,EAAAC,EAAAC,cAAA,6BAtBQ,IAAAU,EA2BoB1C,KAAKQ,MAAMqB,GAArCc,EA3BMD,EA2BNC,QAASC,EA3BHF,EA2BGE,KAAMC,EA3BTH,EA2BSG,OAEvB,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,cAAShC,KAAKQ,MAAMoB,IAAIgB,MAAtC,KACAd,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEa,WAAY,SAAxB,cACahB,EAAAC,EAAAC,cAAA,cAASY,GADtB,0MAKAd,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEa,WAAY,SAAWD,GACnCf,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEa,WAAY,SAAxB,wEAAuGhB,EAAAC,EAAAC,cAAA,cAASW,IAChHb,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEc,UAAW,SAAvB,qBAAoDH,qCAMxD,OAAOd,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UAAf,IAA0BtC,KAAKgD,gBAA/B,YA3FOC,aClBEC,QACW,cAA7BzE,OAAO0E,SAASC,UAEe,UAA7B3E,OAAO0E,SAASC,UAEhB3E,OAAO0E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5a9dd966.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst firebase = window.firebase;\n\nfirebase.initializeApp({\n  apiKey: 'AIzaSyBIwH-TaElo0hGA5z5m38dv_gNgf4DSWsM',\n  authDomain: 'sls-secretsanta.firebaseapp.com',\n  projectId: 'sls-secretsanta'\n});\n\n// Initialize Cloud Firestore through Firebase\nvar db = firebase.firestore();\n\n// Disable deprecated features\ndb.settings({\n  timestampsInSnapshots: true\n});\n\nconst makeId = () => {\n  var text = \"\";\n  var possible = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n\n  for (var i = 0; i < 13; i++)\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n  return text;\n}\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    const slsCode = window.localStorage.getItem('sls-code') || makeId();\n    window.localStorage.setItem('sls-code', slsCode);\n    this.state = {\n      slsCode\n    }\n\n    db.collection(\"Codes\").doc(slsCode)\n    .onSnapshot((doc) => {\n        if (!doc.data()) {\n          db.collection(\"Codes\").doc(slsCode).set({\n            slsCode\n          })\n        } else {\n          this.setState({ code: doc.data() })\n        }\n    });\n\n    this.unsubYou = () => {};\n    this.unsubTo = () => {};\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currState = this.state;\n    const prevYouId = prevState.code && prevState.code.personId;\n    const currYouId = currState.code && currState.code.personId;\n    const prevToId = prevState.code && prevState.code.toId;\n    const currToId = currState.code && currState.code.toId;\n    \n    if (currYouId !== prevYouId) {\n      this.unsubYou();\n      this.unsubYou = db.collection('People').doc(currYouId).onSnapshot(doc => {\n        this.setState({ you: doc.data() })\n      })\n    } \n\n    if (currToId !== prevToId) {\n      this.unsubTo();\n      this.unsubTo = db.collection('People').doc(currToId).onSnapshot(doc => {\n        this.setState({ to: doc.data() })\n      })\n    }\n  }\n\n  renderContent() {\n    if (!this.state.code) {\n      return (\n        <div style={{ display: 'flex', textAlign: 'center', flexDirection: 'column', margin: 'auto' }}>\n          <img className=\"loader\" width=\"100px\" height=\"100px\" style={{ margin: 'auto' }} src=\"https://cdn3.iconfinder.com/data/icons/christmas-flatroom/512/santa_claus_old_beard_costume-512.png\" />\n          <span> loading... </span>\n        </div>\n      );\n    }\n\n    if (!this.state.code.personId) {\n      return (\n        <span>\n          The North Pole Postal Service is running behind, please send <strong>@mitchdzugan</strong> this code: <strong>{this.state.code.slsCode}</strong> to receive your letter to Santa.\n        </span>\n      );\n    }\n\n    if (!this.state.you || !this.state.to) {\n      return (\n        <div style={{ display: 'flex', textAlign: 'center', flexDirection: 'column', margin: 'auto' }}>\n          <img className=\"loader\" width=\"100px\" height=\"100px\" style={{ margin: 'auto' }} src=\"https://cdn3.iconfinder.com/data/icons/christmas-flatroom/512/santa_claus_old_beard_costume-512.png\" />\n          <span> loading... </span>\n        </div>\n      );\n    }\n\n    const { Address, Name, Wishes } = this.state.to;\n\n    return (\n      <div>\n        <p>Dear Santa <strong>{this.state.you.Name}</strong>,</p>\n        <p style={{ marginLeft: '20px' }}>\n          My name is <strong>{Name}</strong>, this year I tried to wfh as little as possible and only raged at \n          leads when I was really triggered so I think I deserve to be on the nice list. If you\n          agree please get me something from this list:\n        </p>\n        <p style={{ marginLeft: '20px' }}>{Wishes}</p>\n        <p style={{ marginLeft: '20px' }}>My chimney is currently out of order so you can just send my gift to <strong>{Address}</strong></p>\n        <p style={{ marginTop: '40px' }}>-Merry Christmas, {Name}</p>\n      </div>\n    );\n  }\n\n  render () {\n    return <div className=\"letter\"> {this.renderContent()} </div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}